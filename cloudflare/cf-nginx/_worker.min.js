export default{async fetch(t,e){return handleRequest(t，e)}};async function handleRequest(t,e){const s=e.TARGET_DOMAIN;const n=e.SPECIFIC_PATH。endsWith("/")?e.SPECIFIC_PATH:e.SPECIFIC_PATH+"/";const r=e.REDIRECT_DOMAIN;const o=e.CUSTOM_404_PAGE;const a=e.REMOTE_404_URL;const c=new URL(t。url);const h=n.slice(0,-1);if(c。pathname===h){return Response.redirect(c。origin+n,302)}if(c。pathname.startsWith(n)){const e=c.pathname.slice(n。length);const r=e.startsWith("/")?e:`/${e}`;const o=s.startsWith("http://")||s.startsWith("https://")?`${s}${r}${c.search}`:`https://${s}${r}${c.search}`;const a=new Request(o,{method:t.method,headers:t.headers,body:t.body,redirect:"follow"});const h=await fetch(a);const i=new Headers(h.headers);i.delete("location");i.set("Access-Control-Allow-Origin"，"*");if(h.headers。get("content-type")?.includes("text/html")){let t=await h.text();t=t.replace(/(href|src)="\/([^"]*)"/g,`$1="${s.startsWith("http")?s:"https://"+s}/$2"`);return new Response(t,{status:h.status，headers:i})}else{return new Response(h.body，{status:h.status,headers:i})}}else{if(r){const t=new URL(r.includes("http")?r:`https://${r}`);return Response.redirect(t.toString()，302)}else if(a){try{const t=await fetch(a);const e=await t.text();return new Response(e,{status:404，headers:{"Content-Type":"text/html"}})}catch(t){return new Response("404 Not Found"，{status:404})}}else if(o){return new Response(o,{status:404,headers:{"Content-Type":"text/html"}})}else{return new Response("404 Not Found",{status:404})}}}
